/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.apono.sdk.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.apono.sdk.model.AccessRequest
import io.apono.sdk.model.CreateAccessRequest
import io.apono.sdk.model.PaginatedResponseAccessRequestV3
import io.apono.sdk.model.PaginatedResponseSelectableIntegrationV3
import io.apono.sdk.model.PaginatedResponseSelectableResourceV3
import io.apono.sdk.model.SelectablePermissionsResponse

import com.fasterxml.jackson.annotation.JsonProperty

import io.apono.sdk.infrastructure.ApiClient
import io.apono.sdk.infrastructure.ApiResponse
import io.apono.sdk.infrastructure.ClientException
import io.apono.sdk.infrastructure.ClientError
import io.apono.sdk.infrastructure.ServerException
import io.apono.sdk.infrastructure.ServerError
import io.apono.sdk.infrastructure.MultiValueMap
import io.apono.sdk.infrastructure.PartConfig
import io.apono.sdk.infrastructure.RequestConfig
import io.apono.sdk.infrastructure.RequestMethod
import io.apono.sdk.infrastructure.ResponseType
import io.apono.sdk.infrastructure.Success
import io.apono.sdk.infrastructure.toMultiValue

class AccessRequestsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apono.io")
        }
    }

    /**
     * create access request
     * 
     * @param createAccessRequest 
     * @return AccessRequest
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createAccessRequest(createAccessRequest: CreateAccessRequest) : AccessRequest {
        val localVarResponse = createAccessRequestWithHttpInfo(createAccessRequest = createAccessRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccessRequest
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * create access request
     * 
     * @param createAccessRequest 
     * @return ApiResponse<AccessRequest?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createAccessRequestWithHttpInfo(createAccessRequest: CreateAccessRequest) : ApiResponse<AccessRequest?> {
        val localVariableConfig = createAccessRequestRequestConfig(createAccessRequest = createAccessRequest)

        return request<CreateAccessRequest, AccessRequest>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createAccessRequest
     *
     * @param createAccessRequest 
     * @return RequestConfig
     */
    fun createAccessRequestRequestConfig(createAccessRequest: CreateAccessRequest) : RequestConfig<CreateAccessRequest> {
        val localVariableBody = createAccessRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v3/access-requests",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * get access request
     * 
     * @param id 
     * @return AccessRequest
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAccessRequest(id: kotlin.String) : AccessRequest {
        val localVarResponse = getAccessRequestWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccessRequest
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get access request
     * 
     * @param id 
     * @return ApiResponse<AccessRequest?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAccessRequestWithHttpInfo(id: kotlin.String) : ApiResponse<AccessRequest?> {
        val localVariableConfig = getAccessRequestRequestConfig(id = id)

        return request<Unit, AccessRequest>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccessRequest
     *
     * @param id 
     * @return RequestConfig
     */
    fun getAccessRequestRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v3/access-requests/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * get selectable integrations
     * 
     * @param userId  (optional)
     * @return PaginatedResponseSelectableIntegrationV3
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSelectableIntegrations(userId: kotlin.String? = null) : PaginatedResponseSelectableIntegrationV3 {
        val localVarResponse = getSelectableIntegrationsWithHttpInfo(userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedResponseSelectableIntegrationV3
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get selectable integrations
     * 
     * @param userId  (optional)
     * @return ApiResponse<PaginatedResponseSelectableIntegrationV3?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSelectableIntegrationsWithHttpInfo(userId: kotlin.String?) : ApiResponse<PaginatedResponseSelectableIntegrationV3?> {
        val localVariableConfig = getSelectableIntegrationsRequestConfig(userId = userId)

        return request<Unit, PaginatedResponseSelectableIntegrationV3>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSelectableIntegrations
     *
     * @param userId  (optional)
     * @return RequestConfig
     */
    fun getSelectableIntegrationsRequestConfig(userId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userId != null) {
                    put("user_id", listOf(userId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v3/selectable-integrations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * get selectable permissions
     * 
     * @param integrationId 
     * @param userId  (optional)
     * @return SelectablePermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSelectablePermissions(integrationId: kotlin.String, userId: kotlin.String? = null) : SelectablePermissionsResponse {
        val localVarResponse = getSelectablePermissionsWithHttpInfo(integrationId = integrationId, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SelectablePermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get selectable permissions
     * 
     * @param integrationId 
     * @param userId  (optional)
     * @return ApiResponse<SelectablePermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSelectablePermissionsWithHttpInfo(integrationId: kotlin.String, userId: kotlin.String?) : ApiResponse<SelectablePermissionsResponse?> {
        val localVariableConfig = getSelectablePermissionsRequestConfig(integrationId = integrationId, userId = userId)

        return request<Unit, SelectablePermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSelectablePermissions
     *
     * @param integrationId 
     * @param userId  (optional)
     * @return RequestConfig
     */
    fun getSelectablePermissionsRequestConfig(integrationId: kotlin.String, userId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userId != null) {
                    put("user_id", listOf(userId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v3/selectable-integrations/{integration_id}/permissions".replace("{"+"integration_id"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * get selectable resources
     * 
     * @param integrationId 
     * @param userId  (optional)
     * @return PaginatedResponseSelectableResourceV3
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSelectableResources(integrationId: kotlin.String, userId: kotlin.String? = null) : PaginatedResponseSelectableResourceV3 {
        val localVarResponse = getSelectableResourcesWithHttpInfo(integrationId = integrationId, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedResponseSelectableResourceV3
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get selectable resources
     * 
     * @param integrationId 
     * @param userId  (optional)
     * @return ApiResponse<PaginatedResponseSelectableResourceV3?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSelectableResourcesWithHttpInfo(integrationId: kotlin.String, userId: kotlin.String?) : ApiResponse<PaginatedResponseSelectableResourceV3?> {
        val localVariableConfig = getSelectableResourcesRequestConfig(integrationId = integrationId, userId = userId)

        return request<Unit, PaginatedResponseSelectableResourceV3>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSelectableResources
     *
     * @param integrationId 
     * @param userId  (optional)
     * @return RequestConfig
     */
    fun getSelectableResourcesRequestConfig(integrationId: kotlin.String, userId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userId != null) {
                    put("user_id", listOf(userId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v3/selectable-integrations/{integration_id}/resources".replace("{"+"integration_id"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * list access requests
     * 
     * @param daysOffset  (optional)
     * @param userId  (optional)
     * @return PaginatedResponseAccessRequestV3
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listAccessRequests(daysOffset: kotlin.Long? = null, userId: kotlin.String? = null) : PaginatedResponseAccessRequestV3 {
        val localVarResponse = listAccessRequestsWithHttpInfo(daysOffset = daysOffset, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedResponseAccessRequestV3
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * list access requests
     * 
     * @param daysOffset  (optional)
     * @param userId  (optional)
     * @return ApiResponse<PaginatedResponseAccessRequestV3?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listAccessRequestsWithHttpInfo(daysOffset: kotlin.Long?, userId: kotlin.String?) : ApiResponse<PaginatedResponseAccessRequestV3?> {
        val localVariableConfig = listAccessRequestsRequestConfig(daysOffset = daysOffset, userId = userId)

        return request<Unit, PaginatedResponseAccessRequestV3>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listAccessRequests
     *
     * @param daysOffset  (optional)
     * @param userId  (optional)
     * @return RequestConfig
     */
    fun listAccessRequestsRequestConfig(daysOffset: kotlin.Long?, userId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (daysOffset != null) {
                    put("days_offset", listOf(daysOffset.toString()))
                }
                if (userId != null) {
                    put("user_id", listOf(userId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v3/access-requests",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
