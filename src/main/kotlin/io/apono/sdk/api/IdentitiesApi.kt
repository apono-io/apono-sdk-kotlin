/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.apono.sdk.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.apono.sdk.model.PaginatedResponseIdentityModelV2

import com.fasterxml.jackson.annotation.JsonProperty

import io.apono.sdk.infrastructure.ApiClient
import io.apono.sdk.infrastructure.ApiResponse
import io.apono.sdk.infrastructure.ClientException
import io.apono.sdk.infrastructure.ClientError
import io.apono.sdk.infrastructure.ServerException
import io.apono.sdk.infrastructure.ServerError
import io.apono.sdk.infrastructure.MultiValueMap
import io.apono.sdk.infrastructure.PartConfig
import io.apono.sdk.infrastructure.RequestConfig
import io.apono.sdk.infrastructure.RequestMethod
import io.apono.sdk.infrastructure.ResponseType
import io.apono.sdk.infrastructure.Success
import io.apono.sdk.infrastructure.toMultiValue

class IdentitiesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apono.io")
        }
    }

    /**
     * list identities, grantees and approvers
     * 
     * @return PaginatedResponseIdentityModelV2
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIdentities() : PaginatedResponseIdentityModelV2 {
        val localVarResponse = listIdentitiesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedResponseIdentityModelV2
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * list identities, grantees and approvers
     * 
     * @return ApiResponse<PaginatedResponseIdentityModelV2?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIdentitiesWithHttpInfo() : ApiResponse<PaginatedResponseIdentityModelV2?> {
        val localVariableConfig = listIdentitiesRequestConfig()

        return request<Unit, PaginatedResponseIdentityModelV2>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listIdentities
     *
     * @return RequestConfig
     */
    fun listIdentitiesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/identities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
